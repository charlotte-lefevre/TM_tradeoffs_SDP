

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_560 = Integer(560); _sage_const_379 = Integer(379); _sage_const_34 = Integer(34); _sage_const_0p948366 = RealNumber('0.948366'); _sage_const_0 = Integer(0)## @package main quick starter to use 3,4-dissection

import numpy as np

load('four_dissec.sage')
load('utils.sage')
load('syndrome_decoding.sage')

F3 = Zmod(_sage_const_3 )

# Used parameters
n = _sage_const_560  ; k = _sage_const_379  ; l = _sage_const_34 
W =_sage_const_0p948366 

## Main function which shall be used to test POC of ternary syndrome decoding using a 3,4-dissection
# It samples uniformly a partity check matrix and syndrome and looks for solution to SDP
def main():
    H = random_matrix(F3, nrows = n-k, ncols = n)
    s = random_vector(F3, n-k)
    w = int(n*W)


    print("Run main algo ..")
    e = SDP(H,s,n,k,l,w)
    e = vector(e)
    print("Solution returned ! Let us check is it works ..")

    if (H*e - s == _sage_const_0 ):
        print("It works :) ")
    else:
        print("\n\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!It does not work .. ! ")
        H = random_matrix(F3, nrows = n-k, ncols = n)
        s = random_vector(F3, n-k)
        e = SDP(H,s,n,k,l,w)
        e = vector(e)
        print((H*e - s == _sage_const_0 ))

main()

